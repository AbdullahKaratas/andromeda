// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AkamaiTotalDNSResult akamai total dns result
//
// swagger:model akamai_total_dns_result
type AkamaiTotalDNSResult struct {

	// datacenters
	Datacenters map[string]AkamaiDatacenterStats `json:"datacenters,omitempty" db:"datacenters,omitempty"`

	// End date of the data range
	// Format: date-time
	EndDate strfmt.DateTime `json:"end_date,omitempty" db:"end_date,omitempty"`

	// Error message if any occurred
	Error *string `json:"error,omitempty" db:"error,omitempty"`

	// The GTM property ID
	Property string `json:"property,omitempty" db:"property,omitempty"`

	// Start date of the data range
	// Format: date-time
	StartDate strfmt.DateTime `json:"start_date,omitempty" db:"start_date,omitempty"`

	// Total number of DNS requests in the period
	TotalRequests int64 `json:"total_requests,omitempty" db:"total_requests,omitempty"`
}

// Validate validates this akamai total dns result
func (m *AkamaiTotalDNSResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatacenters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AkamaiTotalDNSResult) validateDatacenters(formats strfmt.Registry) error {
	if swag.IsZero(m.Datacenters) { // not required
		return nil
	}

	for k := range m.Datacenters {

		if err := validate.Required("datacenters"+"."+k, "body", m.Datacenters[k]); err != nil {
			return err
		}
		if val, ok := m.Datacenters[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datacenters" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datacenters" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *AkamaiTotalDNSResult) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("end_date", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AkamaiTotalDNSResult) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("start_date", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this akamai total dns result based on the context it is used
func (m *AkamaiTotalDNSResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDatacenters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AkamaiTotalDNSResult) contextValidateDatacenters(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Datacenters {

		if val, ok := m.Datacenters[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AkamaiTotalDNSResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AkamaiTotalDNSResult) UnmarshalBinary(b []byte) error {
	var res AkamaiTotalDNSResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
