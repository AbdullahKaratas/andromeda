// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package members

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sapcc/andromeda/models"
)

// GetPoolsPoolIDMembersMemberIDHandlerFunc turns a function with the right signature into a get pools pool ID members member ID handler
type GetPoolsPoolIDMembersMemberIDHandlerFunc func(GetPoolsPoolIDMembersMemberIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPoolsPoolIDMembersMemberIDHandlerFunc) Handle(params GetPoolsPoolIDMembersMemberIDParams) middleware.Responder {
	return fn(params)
}

// GetPoolsPoolIDMembersMemberIDHandler interface for that can handle valid get pools pool ID members member ID params
type GetPoolsPoolIDMembersMemberIDHandler interface {
	Handle(GetPoolsPoolIDMembersMemberIDParams) middleware.Responder
}

// NewGetPoolsPoolIDMembersMemberID creates a new http.Handler for the get pools pool ID members member ID operation
func NewGetPoolsPoolIDMembersMemberID(ctx *middleware.Context, handler GetPoolsPoolIDMembersMemberIDHandler) *GetPoolsPoolIDMembersMemberID {
	return &GetPoolsPoolIDMembersMemberID{Context: ctx, Handler: handler}
}

/*
	GetPoolsPoolIDMembersMemberID swagger:route GET /pools/{pool_id}/members/{member_id} Members getPoolsPoolIdMembersMemberId

Show member detail
*/
type GetPoolsPoolIDMembersMemberID struct {
	Context *middleware.Context
	Handler GetPoolsPoolIDMembersMemberIDHandler
}

func (o *GetPoolsPoolIDMembersMemberID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetPoolsPoolIDMembersMemberIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetPoolsPoolIDMembersMemberIDOKBody get pools pool ID members member ID o k body
//
// swagger:model GetPoolsPoolIDMembersMemberIDOKBody
type GetPoolsPoolIDMembersMemberIDOKBody struct {

	// member
	Member *models.Member `json:"member,omitempty"`
}

// Validate validates this get pools pool ID members member ID o k body
func (o *GetPoolsPoolIDMembersMemberIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMember(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPoolsPoolIDMembersMemberIDOKBody) validateMember(formats strfmt.Registry) error {
	if swag.IsZero(o.Member) { // not required
		return nil
	}

	if o.Member != nil {
		if err := o.Member.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPoolsPoolIdMembersMemberIdOK" + "." + "member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPoolsPoolIdMembersMemberIdOK" + "." + "member")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get pools pool ID members member ID o k body based on the context it is used
func (o *GetPoolsPoolIDMembersMemberIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMember(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPoolsPoolIDMembersMemberIDOKBody) contextValidateMember(ctx context.Context, formats strfmt.Registry) error {

	if o.Member != nil {
		if err := o.Member.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPoolsPoolIdMembersMemberIdOK" + "." + "member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPoolsPoolIdMembersMemberIdOK" + "." + "member")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPoolsPoolIDMembersMemberIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPoolsPoolIDMembersMemberIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetPoolsPoolIDMembersMemberIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
