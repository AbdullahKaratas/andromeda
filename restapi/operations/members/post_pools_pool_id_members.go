// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package members

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/andromeda/models"
)

// PostPoolsPoolIDMembersHandlerFunc turns a function with the right signature into a post pools pool ID members handler
type PostPoolsPoolIDMembersHandlerFunc func(PostPoolsPoolIDMembersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostPoolsPoolIDMembersHandlerFunc) Handle(params PostPoolsPoolIDMembersParams) middleware.Responder {
	return fn(params)
}

// PostPoolsPoolIDMembersHandler interface for that can handle valid post pools pool ID members params
type PostPoolsPoolIDMembersHandler interface {
	Handle(PostPoolsPoolIDMembersParams) middleware.Responder
}

// NewPostPoolsPoolIDMembers creates a new http.Handler for the post pools pool ID members operation
func NewPostPoolsPoolIDMembers(ctx *middleware.Context, handler PostPoolsPoolIDMembersHandler) *PostPoolsPoolIDMembers {
	return &PostPoolsPoolIDMembers{Context: ctx, Handler: handler}
}

/* PostPoolsPoolIDMembers swagger:route POST /pools/{pool_id}/members Members postPoolsPoolIdMembers

Create new member

*/
type PostPoolsPoolIDMembers struct {
	Context *middleware.Context
	Handler PostPoolsPoolIDMembersHandler
}

func (o *PostPoolsPoolIDMembers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostPoolsPoolIDMembersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostPoolsPoolIDMembersBody post pools pool ID members body
//
// swagger:model PostPoolsPoolIDMembersBody
type PostPoolsPoolIDMembersBody struct {

	// member
	// Required: true
	Member *models.Member `json:"member"`
}

// Validate validates this post pools pool ID members body
func (o *PostPoolsPoolIDMembersBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMember(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPoolsPoolIDMembersBody) validateMember(formats strfmt.Registry) error {

	if err := validate.Required("member"+"."+"member", "body", o.Member); err != nil {
		return err
	}

	if o.Member != nil {
		if err := o.Member.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("member" + "." + "member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("member" + "." + "member")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post pools pool ID members body based on the context it is used
func (o *PostPoolsPoolIDMembersBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMember(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPoolsPoolIDMembersBody) contextValidateMember(ctx context.Context, formats strfmt.Registry) error {

	if o.Member != nil {
		if err := o.Member.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("member" + "." + "member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("member" + "." + "member")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostPoolsPoolIDMembersBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostPoolsPoolIDMembersBody) UnmarshalBinary(b []byte) error {
	var res PostPoolsPoolIDMembersBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostPoolsPoolIDMembersCreatedBody post pools pool ID members created body
//
// swagger:model PostPoolsPoolIDMembersCreatedBody
type PostPoolsPoolIDMembersCreatedBody struct {

	// member
	Member *models.Member `json:"member,omitempty"`
}

// Validate validates this post pools pool ID members created body
func (o *PostPoolsPoolIDMembersCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMember(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPoolsPoolIDMembersCreatedBody) validateMember(formats strfmt.Registry) error {
	if swag.IsZero(o.Member) { // not required
		return nil
	}

	if o.Member != nil {
		if err := o.Member.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postPoolsPoolIdMembersCreated" + "." + "member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postPoolsPoolIdMembersCreated" + "." + "member")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post pools pool ID members created body based on the context it is used
func (o *PostPoolsPoolIDMembersCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMember(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPoolsPoolIDMembersCreatedBody) contextValidateMember(ctx context.Context, formats strfmt.Registry) error {

	if o.Member != nil {
		if err := o.Member.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postPoolsPoolIdMembersCreated" + "." + "member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postPoolsPoolIdMembersCreated" + "." + "member")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostPoolsPoolIDMembersCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostPoolsPoolIDMembersCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostPoolsPoolIDMembersCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
