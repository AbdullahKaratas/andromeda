// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeletePoolsPoolIDHandlerFunc turns a function with the right signature into a delete pools pool ID handler
type DeletePoolsPoolIDHandlerFunc func(DeletePoolsPoolIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeletePoolsPoolIDHandlerFunc) Handle(params DeletePoolsPoolIDParams) middleware.Responder {
	return fn(params)
}

// DeletePoolsPoolIDHandler interface for that can handle valid delete pools pool ID params
type DeletePoolsPoolIDHandler interface {
	Handle(DeletePoolsPoolIDParams) middleware.Responder
}

// NewDeletePoolsPoolID creates a new http.Handler for the delete pools pool ID operation
func NewDeletePoolsPoolID(ctx *middleware.Context, handler DeletePoolsPoolIDHandler) *DeletePoolsPoolID {
	return &DeletePoolsPoolID{Context: ctx, Handler: handler}
}

/* DeletePoolsPoolID swagger:route DELETE /pools/{pool_id} Pools deletePoolsPoolId

Delete a pool

*/
type DeletePoolsPoolID struct {
	Context *middleware.Context
	Handler DeletePoolsPoolIDHandler
}

func (o *DeletePoolsPoolID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeletePoolsPoolIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
