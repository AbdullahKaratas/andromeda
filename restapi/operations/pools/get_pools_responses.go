// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sapcc/andromeda/models"
)

// GetPoolsOKCode is the HTTP code returned for type GetPoolsOK
const GetPoolsOKCode int = 200

/*GetPoolsOK A JSON array of pools

swagger:response getPoolsOK
*/
type GetPoolsOK struct {

	/*
	  In: Body
	*/
	Payload *GetPoolsOKBody `json:"body,omitempty"`
}

// NewGetPoolsOK creates GetPoolsOK with default headers values
func NewGetPoolsOK() *GetPoolsOK {

	return &GetPoolsOK{}
}

// WithPayload adds the payload to the get pools o k response
func (o *GetPoolsOK) WithPayload(payload *GetPoolsOKBody) *GetPoolsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get pools o k response
func (o *GetPoolsOK) SetPayload(payload *GetPoolsOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPoolsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPoolsBadRequestCode is the HTTP code returned for type GetPoolsBadRequest
const GetPoolsBadRequestCode int = 400

/*GetPoolsBadRequest Bad request

swagger:response getPoolsBadRequest
*/
type GetPoolsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPoolsBadRequest creates GetPoolsBadRequest with default headers values
func NewGetPoolsBadRequest() *GetPoolsBadRequest {

	return &GetPoolsBadRequest{}
}

// WithPayload adds the payload to the get pools bad request response
func (o *GetPoolsBadRequest) WithPayload(payload *models.Error) *GetPoolsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get pools bad request response
func (o *GetPoolsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPoolsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetPoolsDefault Unexpected Error

swagger:response getPoolsDefault
*/
type GetPoolsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPoolsDefault creates GetPoolsDefault with default headers values
func NewGetPoolsDefault(code int) *GetPoolsDefault {
	if code <= 0 {
		code = 500
	}

	return &GetPoolsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get pools default response
func (o *GetPoolsDefault) WithStatusCode(code int) *GetPoolsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get pools default response
func (o *GetPoolsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get pools default response
func (o *GetPoolsDefault) WithPayload(payload *models.Error) *GetPoolsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get pools default response
func (o *GetPoolsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPoolsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
