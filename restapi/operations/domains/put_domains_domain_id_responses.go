// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sapcc/andromeda/models"
)

// PutDomainsDomainIDAcceptedCode is the HTTP code returned for type PutDomainsDomainIDAccepted
const PutDomainsDomainIDAcceptedCode int = 202

/*
PutDomainsDomainIDAccepted Updated domain.

swagger:response putDomainsDomainIdAccepted
*/
type PutDomainsDomainIDAccepted struct {

	/*
	  In: Body
	*/
	Payload *PutDomainsDomainIDAcceptedBody `json:"body,omitempty"`
}

// NewPutDomainsDomainIDAccepted creates PutDomainsDomainIDAccepted with default headers values
func NewPutDomainsDomainIDAccepted() *PutDomainsDomainIDAccepted {

	return &PutDomainsDomainIDAccepted{}
}

// WithPayload adds the payload to the put domains domain Id accepted response
func (o *PutDomainsDomainIDAccepted) WithPayload(payload *PutDomainsDomainIDAcceptedBody) *PutDomainsDomainIDAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put domains domain Id accepted response
func (o *PutDomainsDomainIDAccepted) SetPayload(payload *PutDomainsDomainIDAcceptedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutDomainsDomainIDAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutDomainsDomainIDBadRequestCode is the HTTP code returned for type PutDomainsDomainIDBadRequest
const PutDomainsDomainIDBadRequestCode int = 400

/*
PutDomainsDomainIDBadRequest Bad request

swagger:response putDomainsDomainIdBadRequest
*/
type PutDomainsDomainIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutDomainsDomainIDBadRequest creates PutDomainsDomainIDBadRequest with default headers values
func NewPutDomainsDomainIDBadRequest() *PutDomainsDomainIDBadRequest {

	return &PutDomainsDomainIDBadRequest{}
}

// WithPayload adds the payload to the put domains domain Id bad request response
func (o *PutDomainsDomainIDBadRequest) WithPayload(payload *models.Error) *PutDomainsDomainIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put domains domain Id bad request response
func (o *PutDomainsDomainIDBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutDomainsDomainIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutDomainsDomainIDNotFoundCode is the HTTP code returned for type PutDomainsDomainIDNotFound
const PutDomainsDomainIDNotFoundCode int = 404

/*
PutDomainsDomainIDNotFound Not Found

swagger:response putDomainsDomainIdNotFound
*/
type PutDomainsDomainIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutDomainsDomainIDNotFound creates PutDomainsDomainIDNotFound with default headers values
func NewPutDomainsDomainIDNotFound() *PutDomainsDomainIDNotFound {

	return &PutDomainsDomainIDNotFound{}
}

// WithPayload adds the payload to the put domains domain Id not found response
func (o *PutDomainsDomainIDNotFound) WithPayload(payload *models.Error) *PutDomainsDomainIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put domains domain Id not found response
func (o *PutDomainsDomainIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutDomainsDomainIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
PutDomainsDomainIDDefault Unexpected Error

swagger:response putDomainsDomainIdDefault
*/
type PutDomainsDomainIDDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutDomainsDomainIDDefault creates PutDomainsDomainIDDefault with default headers values
func NewPutDomainsDomainIDDefault(code int) *PutDomainsDomainIDDefault {
	if code <= 0 {
		code = 500
	}

	return &PutDomainsDomainIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put domains domain ID default response
func (o *PutDomainsDomainIDDefault) WithStatusCode(code int) *PutDomainsDomainIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put domains domain ID default response
func (o *PutDomainsDomainIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put domains domain ID default response
func (o *PutDomainsDomainIDDefault) WithPayload(payload *models.Error) *PutDomainsDomainIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put domains domain ID default response
func (o *PutDomainsDomainIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutDomainsDomainIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
