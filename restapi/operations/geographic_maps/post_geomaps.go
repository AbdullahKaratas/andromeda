// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package geographic_maps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/andromeda/models"
)

// PostGeomapsHandlerFunc turns a function with the right signature into a post geomaps handler
type PostGeomapsHandlerFunc func(PostGeomapsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostGeomapsHandlerFunc) Handle(params PostGeomapsParams) middleware.Responder {
	return fn(params)
}

// PostGeomapsHandler interface for that can handle valid post geomaps params
type PostGeomapsHandler interface {
	Handle(PostGeomapsParams) middleware.Responder
}

// NewPostGeomaps creates a new http.Handler for the post geomaps operation
func NewPostGeomaps(ctx *middleware.Context, handler PostGeomapsHandler) *PostGeomaps {
	return &PostGeomaps{Context: ctx, Handler: handler}
}

/*
	PostGeomaps swagger:route POST /geomaps Geographic maps postGeomaps

Create new geographic map
*/
type PostGeomaps struct {
	Context *middleware.Context
	Handler PostGeomapsHandler
}

func (o *PostGeomaps) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostGeomapsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostGeomapsBody post geomaps body
//
// swagger:model PostGeomapsBody
type PostGeomapsBody struct {

	// geomap
	// Required: true
	Geomap *models.Geomap `json:"geomap"`
}

// Validate validates this post geomaps body
func (o *PostGeomapsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGeomap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostGeomapsBody) validateGeomap(formats strfmt.Registry) error {

	if err := validate.Required("geomap"+"."+"geomap", "body", o.Geomap); err != nil {
		return err
	}

	if o.Geomap != nil {
		if err := o.Geomap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geomap" + "." + "geomap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("geomap" + "." + "geomap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post geomaps body based on the context it is used
func (o *PostGeomapsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateGeomap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostGeomapsBody) contextValidateGeomap(ctx context.Context, formats strfmt.Registry) error {

	if o.Geomap != nil {
		if err := o.Geomap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geomap" + "." + "geomap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("geomap" + "." + "geomap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostGeomapsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostGeomapsBody) UnmarshalBinary(b []byte) error {
	var res PostGeomapsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostGeomapsCreatedBody post geomaps created body
//
// swagger:model PostGeomapsCreatedBody
type PostGeomapsCreatedBody struct {

	// geomap
	Geomap *models.Geomap `json:"geomap,omitempty"`
}

// Validate validates this post geomaps created body
func (o *PostGeomapsCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGeomap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostGeomapsCreatedBody) validateGeomap(formats strfmt.Registry) error {
	if swag.IsZero(o.Geomap) { // not required
		return nil
	}

	if o.Geomap != nil {
		if err := o.Geomap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postGeomapsCreated" + "." + "geomap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postGeomapsCreated" + "." + "geomap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post geomaps created body based on the context it is used
func (o *PostGeomapsCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateGeomap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostGeomapsCreatedBody) contextValidateGeomap(ctx context.Context, formats strfmt.Registry) error {

	if o.Geomap != nil {
		if err := o.Geomap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postGeomapsCreated" + "." + "geomap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postGeomapsCreated" + "." + "geomap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostGeomapsCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostGeomapsCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostGeomapsCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
