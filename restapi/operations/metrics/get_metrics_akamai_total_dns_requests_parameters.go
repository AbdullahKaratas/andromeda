// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetMetricsAkamaiTotalDNSRequestsParams creates a new GetMetricsAkamaiTotalDNSRequestsParams object
//
// There are no default values defined in the spec.
func NewGetMetricsAkamaiTotalDNSRequestsParams() GetMetricsAkamaiTotalDNSRequestsParams {

	return GetMetricsAkamaiTotalDNSRequestsParams{}
}

// GetMetricsAkamaiTotalDNSRequestsParams contains all the bound params for the get metrics akamai total DNS requests operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetMetricsAkamaiTotalDNSRequests
type GetMetricsAkamaiTotalDNSRequestsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Domain UUID to get metrics for
	  Required: true
	  In: query
	*/
	DomainID strfmt.UUID
	/*End date in ISO format (default: 15 minutes ago)
	  In: query
	*/
	End *strfmt.DateTime
	/*Start date in ISO format (default: 2 days before end date)
	  In: query
	*/
	Start *strfmt.DateTime
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetMetricsAkamaiTotalDNSRequestsParams() beforehand.
func (o *GetMetricsAkamaiTotalDNSRequestsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDomainID, qhkDomainID, _ := qs.GetOK("domain_id")
	if err := o.bindDomainID(qDomainID, qhkDomainID, route.Formats); err != nil {
		res = append(res, err)
	}

	qEnd, qhkEnd, _ := qs.GetOK("end")
	if err := o.bindEnd(qEnd, qhkEnd, route.Formats); err != nil {
		res = append(res, err)
	}

	qStart, qhkStart, _ := qs.GetOK("start")
	if err := o.bindStart(qStart, qhkStart, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDomainID binds and validates parameter DomainID from query.
func (o *GetMetricsAkamaiTotalDNSRequestsParams) bindDomainID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("domain_id", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("domain_id", "query", raw); err != nil {
		return err
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("domain_id", "query", "strfmt.UUID", raw)
	}
	o.DomainID = *(value.(*strfmt.UUID))

	if err := o.validateDomainID(formats); err != nil {
		return err
	}

	return nil
}

// validateDomainID carries on validations for parameter DomainID
func (o *GetMetricsAkamaiTotalDNSRequestsParams) validateDomainID(formats strfmt.Registry) error {

	if err := validate.FormatOf("domain_id", "query", "uuid", o.DomainID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindEnd binds and validates parameter End from query.
func (o *GetMetricsAkamaiTotalDNSRequestsParams) bindEnd(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("end", "query", "strfmt.DateTime", raw)
	}
	o.End = (value.(*strfmt.DateTime))

	if err := o.validateEnd(formats); err != nil {
		return err
	}

	return nil
}

// validateEnd carries on validations for parameter End
func (o *GetMetricsAkamaiTotalDNSRequestsParams) validateEnd(formats strfmt.Registry) error {

	if err := validate.FormatOf("end", "query", "date-time", o.End.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindStart binds and validates parameter Start from query.
func (o *GetMetricsAkamaiTotalDNSRequestsParams) bindStart(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("start", "query", "strfmt.DateTime", raw)
	}
	o.Start = (value.(*strfmt.DateTime))

	if err := o.validateStart(formats); err != nil {
		return err
	}

	return nil
}

// validateStart carries on validations for parameter Start
func (o *GetMetricsAkamaiTotalDNSRequestsParams) validateStart(formats strfmt.Registry) error {

	if err := validate.FormatOf("start", "query", "date-time", o.Start.String(), formats); err != nil {
		return err
	}
	return nil
}
