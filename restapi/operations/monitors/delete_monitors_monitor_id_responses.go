// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sapcc/andromeda/models"
)

// DeleteMonitorsMonitorIDNoContentCode is the HTTP code returned for type DeleteMonitorsMonitorIDNoContent
const DeleteMonitorsMonitorIDNoContentCode int = 204

/*
DeleteMonitorsMonitorIDNoContent Resource successfully deleted.

swagger:response deleteMonitorsMonitorIdNoContent
*/
type DeleteMonitorsMonitorIDNoContent struct {
}

// NewDeleteMonitorsMonitorIDNoContent creates DeleteMonitorsMonitorIDNoContent with default headers values
func NewDeleteMonitorsMonitorIDNoContent() *DeleteMonitorsMonitorIDNoContent {

	return &DeleteMonitorsMonitorIDNoContent{}
}

// WriteResponse to the client
func (o *DeleteMonitorsMonitorIDNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteMonitorsMonitorIDNotFoundCode is the HTTP code returned for type DeleteMonitorsMonitorIDNotFound
const DeleteMonitorsMonitorIDNotFoundCode int = 404

/*
DeleteMonitorsMonitorIDNotFound Not Found

swagger:response deleteMonitorsMonitorIdNotFound
*/
type DeleteMonitorsMonitorIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteMonitorsMonitorIDNotFound creates DeleteMonitorsMonitorIDNotFound with default headers values
func NewDeleteMonitorsMonitorIDNotFound() *DeleteMonitorsMonitorIDNotFound {

	return &DeleteMonitorsMonitorIDNotFound{}
}

// WithPayload adds the payload to the delete monitors monitor Id not found response
func (o *DeleteMonitorsMonitorIDNotFound) WithPayload(payload *models.Error) *DeleteMonitorsMonitorIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete monitors monitor Id not found response
func (o *DeleteMonitorsMonitorIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteMonitorsMonitorIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
DeleteMonitorsMonitorIDDefault Unexpected Error

swagger:response deleteMonitorsMonitorIdDefault
*/
type DeleteMonitorsMonitorIDDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteMonitorsMonitorIDDefault creates DeleteMonitorsMonitorIDDefault with default headers values
func NewDeleteMonitorsMonitorIDDefault(code int) *DeleteMonitorsMonitorIDDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteMonitorsMonitorIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete monitors monitor ID default response
func (o *DeleteMonitorsMonitorIDDefault) WithStatusCode(code int) *DeleteMonitorsMonitorIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete monitors monitor ID default response
func (o *DeleteMonitorsMonitorIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete monitors monitor ID default response
func (o *DeleteMonitorsMonitorIDDefault) WithPayload(payload *models.Error) *DeleteMonitorsMonitorIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete monitors monitor ID default response
func (o *DeleteMonitorsMonitorIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteMonitorsMonitorIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
