// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sapcc/andromeda/models"
)

// GetMonitorsHandlerFunc turns a function with the right signature into a get monitors handler
type GetMonitorsHandlerFunc func(GetMonitorsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMonitorsHandlerFunc) Handle(params GetMonitorsParams) middleware.Responder {
	return fn(params)
}

// GetMonitorsHandler interface for that can handle valid get monitors params
type GetMonitorsHandler interface {
	Handle(GetMonitorsParams) middleware.Responder
}

// NewGetMonitors creates a new http.Handler for the get monitors operation
func NewGetMonitors(ctx *middleware.Context, handler GetMonitorsHandler) *GetMonitors {
	return &GetMonitors{Context: ctx, Handler: handler}
}

/* GetMonitors swagger:route GET /monitors Monitors getMonitors

List monitors

*/
type GetMonitors struct {
	Context *middleware.Context
	Handler GetMonitorsHandler
}

func (o *GetMonitors) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMonitorsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetMonitorsOKBody get monitors o k body
//
// swagger:model GetMonitorsOKBody
type GetMonitorsOKBody struct {

	// links
	Links []*models.Link `json:"links,omitempty"`

	// monitors
	Monitors []*models.Monitor `json:"monitors"`
}

// Validate validates this get monitors o k body
func (o *GetMonitorsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMonitors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMonitorsOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	for i := 0; i < len(o.Links); i++ {
		if swag.IsZero(o.Links[i]) { // not required
			continue
		}

		if o.Links[i] != nil {
			if err := o.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getMonitorsOK" + "." + "links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getMonitorsOK" + "." + "links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetMonitorsOKBody) validateMonitors(formats strfmt.Registry) error {
	if swag.IsZero(o.Monitors) { // not required
		return nil
	}

	for i := 0; i < len(o.Monitors); i++ {
		if swag.IsZero(o.Monitors[i]) { // not required
			continue
		}

		if o.Monitors[i] != nil {
			if err := o.Monitors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getMonitorsOK" + "." + "monitors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getMonitorsOK" + "." + "monitors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get monitors o k body based on the context it is used
func (o *GetMonitorsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMonitors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMonitorsOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Links); i++ {

		if o.Links[i] != nil {
			if err := o.Links[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getMonitorsOK" + "." + "links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getMonitorsOK" + "." + "links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetMonitorsOKBody) contextValidateMonitors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Monitors); i++ {

		if o.Monitors[i] != nil {
			if err := o.Monitors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getMonitorsOK" + "." + "monitors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getMonitorsOK" + "." + "monitors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetMonitorsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMonitorsOKBody) UnmarshalBinary(b []byte) error {
	var res GetMonitorsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
