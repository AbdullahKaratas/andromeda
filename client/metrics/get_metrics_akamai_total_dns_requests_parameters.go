// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetMetricsAkamaiTotalDNSRequestsParams creates a new GetMetricsAkamaiTotalDNSRequestsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetMetricsAkamaiTotalDNSRequestsParams() *GetMetricsAkamaiTotalDNSRequestsParams {
	return &GetMetricsAkamaiTotalDNSRequestsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetMetricsAkamaiTotalDNSRequestsParamsWithTimeout creates a new GetMetricsAkamaiTotalDNSRequestsParams object
// with the ability to set a timeout on a request.
func NewGetMetricsAkamaiTotalDNSRequestsParamsWithTimeout(timeout time.Duration) *GetMetricsAkamaiTotalDNSRequestsParams {
	return &GetMetricsAkamaiTotalDNSRequestsParams{
		timeout: timeout,
	}
}

// NewGetMetricsAkamaiTotalDNSRequestsParamsWithContext creates a new GetMetricsAkamaiTotalDNSRequestsParams object
// with the ability to set a context for a request.
func NewGetMetricsAkamaiTotalDNSRequestsParamsWithContext(ctx context.Context) *GetMetricsAkamaiTotalDNSRequestsParams {
	return &GetMetricsAkamaiTotalDNSRequestsParams{
		Context: ctx,
	}
}

// NewGetMetricsAkamaiTotalDNSRequestsParamsWithHTTPClient creates a new GetMetricsAkamaiTotalDNSRequestsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetMetricsAkamaiTotalDNSRequestsParamsWithHTTPClient(client *http.Client) *GetMetricsAkamaiTotalDNSRequestsParams {
	return &GetMetricsAkamaiTotalDNSRequestsParams{
		HTTPClient: client,
	}
}

/*
GetMetricsAkamaiTotalDNSRequestsParams contains all the parameters to send to the API endpoint

	for the get metrics akamai total DNS requests operation.

	Typically these are written to a http.Request.
*/
type GetMetricsAkamaiTotalDNSRequestsParams struct {

	/* Domain.

	   GTM domain name (default: andromeda.akadns.net)
	*/
	Domain *string

	/* End.

	   End date in ISO format (default: 15 minutes ago)

	   Format: date-time
	*/
	End *strfmt.DateTime

	/* Property.

	   GTM property ID
	*/
	Property string

	/* Start.

	   Start date in ISO format (default: 2 days before end date)

	   Format: date-time
	*/
	Start *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get metrics akamai total DNS requests params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMetricsAkamaiTotalDNSRequestsParams) WithDefaults() *GetMetricsAkamaiTotalDNSRequestsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get metrics akamai total DNS requests params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMetricsAkamaiTotalDNSRequestsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get metrics akamai total DNS requests params
func (o *GetMetricsAkamaiTotalDNSRequestsParams) WithTimeout(timeout time.Duration) *GetMetricsAkamaiTotalDNSRequestsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get metrics akamai total DNS requests params
func (o *GetMetricsAkamaiTotalDNSRequestsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get metrics akamai total DNS requests params
func (o *GetMetricsAkamaiTotalDNSRequestsParams) WithContext(ctx context.Context) *GetMetricsAkamaiTotalDNSRequestsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get metrics akamai total DNS requests params
func (o *GetMetricsAkamaiTotalDNSRequestsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get metrics akamai total DNS requests params
func (o *GetMetricsAkamaiTotalDNSRequestsParams) WithHTTPClient(client *http.Client) *GetMetricsAkamaiTotalDNSRequestsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get metrics akamai total DNS requests params
func (o *GetMetricsAkamaiTotalDNSRequestsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomain adds the domain to the get metrics akamai total DNS requests params
func (o *GetMetricsAkamaiTotalDNSRequestsParams) WithDomain(domain *string) *GetMetricsAkamaiTotalDNSRequestsParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the get metrics akamai total DNS requests params
func (o *GetMetricsAkamaiTotalDNSRequestsParams) SetDomain(domain *string) {
	o.Domain = domain
}

// WithEnd adds the end to the get metrics akamai total DNS requests params
func (o *GetMetricsAkamaiTotalDNSRequestsParams) WithEnd(end *strfmt.DateTime) *GetMetricsAkamaiTotalDNSRequestsParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the get metrics akamai total DNS requests params
func (o *GetMetricsAkamaiTotalDNSRequestsParams) SetEnd(end *strfmt.DateTime) {
	o.End = end
}

// WithProperty adds the property to the get metrics akamai total DNS requests params
func (o *GetMetricsAkamaiTotalDNSRequestsParams) WithProperty(property string) *GetMetricsAkamaiTotalDNSRequestsParams {
	o.SetProperty(property)
	return o
}

// SetProperty adds the property to the get metrics akamai total DNS requests params
func (o *GetMetricsAkamaiTotalDNSRequestsParams) SetProperty(property string) {
	o.Property = property
}

// WithStart adds the start to the get metrics akamai total DNS requests params
func (o *GetMetricsAkamaiTotalDNSRequestsParams) WithStart(start *strfmt.DateTime) *GetMetricsAkamaiTotalDNSRequestsParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get metrics akamai total DNS requests params
func (o *GetMetricsAkamaiTotalDNSRequestsParams) SetStart(start *strfmt.DateTime) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *GetMetricsAkamaiTotalDNSRequestsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Domain != nil {

		// query param domain
		var qrDomain string

		if o.Domain != nil {
			qrDomain = *o.Domain
		}
		qDomain := qrDomain
		if qDomain != "" {

			if err := r.SetQueryParam("domain", qDomain); err != nil {
				return err
			}
		}
	}

	if o.End != nil {

		// query param end
		var qrEnd strfmt.DateTime

		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := qrEnd.String()
		if qEnd != "" {

			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}
	}

	// query param property
	qrProperty := o.Property
	qProperty := qrProperty
	if qProperty != "" {

		if err := r.SetQueryParam("property", qProperty); err != nil {
			return err
		}
	}

	if o.Start != nil {

		// query param start
		var qrStart strfmt.DateTime

		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := qrStart.String()
		if qStart != "" {

			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
