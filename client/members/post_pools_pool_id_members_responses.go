// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package members

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/andromeda/models"
)

// PostPoolsPoolIDMembersReader is a Reader for the PostPoolsPoolIDMembers structure.
type PostPoolsPoolIDMembersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostPoolsPoolIDMembersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostPoolsPoolIDMembersCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostPoolsPoolIDMembersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostPoolsPoolIDMembersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPostPoolsPoolIDMembersDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostPoolsPoolIDMembersCreated creates a PostPoolsPoolIDMembersCreated with default headers values
func NewPostPoolsPoolIDMembersCreated() *PostPoolsPoolIDMembersCreated {
	return &PostPoolsPoolIDMembersCreated{}
}

/* PostPoolsPoolIDMembersCreated describes a response with status code 201, with default header values.

Created member.
*/
type PostPoolsPoolIDMembersCreated struct {
	Payload *PostPoolsPoolIDMembersCreatedBody
}

func (o *PostPoolsPoolIDMembersCreated) Error() string {
	return fmt.Sprintf("[POST /pools/{pool_id}/members][%d] postPoolsPoolIdMembersCreated  %+v", 201, o.Payload)
}
func (o *PostPoolsPoolIDMembersCreated) GetPayload() *PostPoolsPoolIDMembersCreatedBody {
	return o.Payload
}

func (o *PostPoolsPoolIDMembersCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostPoolsPoolIDMembersCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPoolsPoolIDMembersBadRequest creates a PostPoolsPoolIDMembersBadRequest with default headers values
func NewPostPoolsPoolIDMembersBadRequest() *PostPoolsPoolIDMembersBadRequest {
	return &PostPoolsPoolIDMembersBadRequest{}
}

/* PostPoolsPoolIDMembersBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PostPoolsPoolIDMembersBadRequest struct {
	Payload *models.Error
}

func (o *PostPoolsPoolIDMembersBadRequest) Error() string {
	return fmt.Sprintf("[POST /pools/{pool_id}/members][%d] postPoolsPoolIdMembersBadRequest  %+v", 400, o.Payload)
}
func (o *PostPoolsPoolIDMembersBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostPoolsPoolIDMembersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPoolsPoolIDMembersNotFound creates a PostPoolsPoolIDMembersNotFound with default headers values
func NewPostPoolsPoolIDMembersNotFound() *PostPoolsPoolIDMembersNotFound {
	return &PostPoolsPoolIDMembersNotFound{}
}

/* PostPoolsPoolIDMembersNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostPoolsPoolIDMembersNotFound struct {
	Payload *models.Error
}

func (o *PostPoolsPoolIDMembersNotFound) Error() string {
	return fmt.Sprintf("[POST /pools/{pool_id}/members][%d] postPoolsPoolIdMembersNotFound  %+v", 404, o.Payload)
}
func (o *PostPoolsPoolIDMembersNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostPoolsPoolIDMembersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPoolsPoolIDMembersDefault creates a PostPoolsPoolIDMembersDefault with default headers values
func NewPostPoolsPoolIDMembersDefault(code int) *PostPoolsPoolIDMembersDefault {
	return &PostPoolsPoolIDMembersDefault{
		_statusCode: code,
	}
}

/* PostPoolsPoolIDMembersDefault describes a response with status code -1, with default header values.

Unexpected Error
*/
type PostPoolsPoolIDMembersDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the post pools pool ID members default response
func (o *PostPoolsPoolIDMembersDefault) Code() int {
	return o._statusCode
}

func (o *PostPoolsPoolIDMembersDefault) Error() string {
	return fmt.Sprintf("[POST /pools/{pool_id}/members][%d] PostPoolsPoolIDMembers default  %+v", o._statusCode, o.Payload)
}
func (o *PostPoolsPoolIDMembersDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostPoolsPoolIDMembersDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostPoolsPoolIDMembersBody post pools pool ID members body
swagger:model PostPoolsPoolIDMembersBody
*/
type PostPoolsPoolIDMembersBody struct {

	// member
	// Required: true
	Member *models.Member `json:"member"`
}

// Validate validates this post pools pool ID members body
func (o *PostPoolsPoolIDMembersBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMember(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPoolsPoolIDMembersBody) validateMember(formats strfmt.Registry) error {

	if err := validate.Required("member"+"."+"member", "body", o.Member); err != nil {
		return err
	}

	if o.Member != nil {
		if err := o.Member.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("member" + "." + "member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("member" + "." + "member")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post pools pool ID members body based on the context it is used
func (o *PostPoolsPoolIDMembersBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMember(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPoolsPoolIDMembersBody) contextValidateMember(ctx context.Context, formats strfmt.Registry) error {

	if o.Member != nil {
		if err := o.Member.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("member" + "." + "member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("member" + "." + "member")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostPoolsPoolIDMembersBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostPoolsPoolIDMembersBody) UnmarshalBinary(b []byte) error {
	var res PostPoolsPoolIDMembersBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostPoolsPoolIDMembersCreatedBody post pools pool ID members created body
swagger:model PostPoolsPoolIDMembersCreatedBody
*/
type PostPoolsPoolIDMembersCreatedBody struct {

	// member
	Member *models.Member `json:"member,omitempty"`
}

// Validate validates this post pools pool ID members created body
func (o *PostPoolsPoolIDMembersCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMember(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPoolsPoolIDMembersCreatedBody) validateMember(formats strfmt.Registry) error {
	if swag.IsZero(o.Member) { // not required
		return nil
	}

	if o.Member != nil {
		if err := o.Member.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postPoolsPoolIdMembersCreated" + "." + "member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postPoolsPoolIdMembersCreated" + "." + "member")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post pools pool ID members created body based on the context it is used
func (o *PostPoolsPoolIDMembersCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMember(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPoolsPoolIDMembersCreatedBody) contextValidateMember(ctx context.Context, formats strfmt.Registry) error {

	if o.Member != nil {
		if err := o.Member.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postPoolsPoolIdMembersCreated" + "." + "member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postPoolsPoolIdMembersCreated" + "." + "member")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostPoolsPoolIDMembersCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostPoolsPoolIDMembersCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostPoolsPoolIDMembersCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
