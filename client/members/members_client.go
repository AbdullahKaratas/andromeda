// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package members

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new members API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for members API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeletePoolsPoolIDMembersMemberID(params *DeletePoolsPoolIDMembersMemberIDParams, opts ...ClientOption) (*DeletePoolsPoolIDMembersMemberIDNoContent, error)

	GetPoolsPoolIDMembers(params *GetPoolsPoolIDMembersParams, opts ...ClientOption) (*GetPoolsPoolIDMembersOK, error)

	GetPoolsPoolIDMembersMemberID(params *GetPoolsPoolIDMembersMemberIDParams, opts ...ClientOption) (*GetPoolsPoolIDMembersMemberIDOK, error)

	PostPoolsPoolIDMembers(params *PostPoolsPoolIDMembersParams, opts ...ClientOption) (*PostPoolsPoolIDMembersCreated, error)

	PutPoolsPoolIDMembersMemberID(params *PutPoolsPoolIDMembersMemberIDParams, opts ...ClientOption) (*PutPoolsPoolIDMembersMemberIDAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeletePoolsPoolIDMembersMemberID deletes a member
*/
func (a *Client) DeletePoolsPoolIDMembersMemberID(params *DeletePoolsPoolIDMembersMemberIDParams, opts ...ClientOption) (*DeletePoolsPoolIDMembersMemberIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePoolsPoolIDMembersMemberIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeletePoolsPoolIDMembersMemberID",
		Method:             "DELETE",
		PathPattern:        "/pools/{pool_id}/members/{member_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePoolsPoolIDMembersMemberIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePoolsPoolIDMembersMemberIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeletePoolsPoolIDMembersMemberIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetPoolsPoolIDMembers lists members
*/
func (a *Client) GetPoolsPoolIDMembers(params *GetPoolsPoolIDMembersParams, opts ...ClientOption) (*GetPoolsPoolIDMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPoolsPoolIDMembersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPoolsPoolIDMembers",
		Method:             "GET",
		PathPattern:        "/pools/{pool_id}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPoolsPoolIDMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPoolsPoolIDMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPoolsPoolIDMembersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetPoolsPoolIDMembersMemberID shows member detail
*/
func (a *Client) GetPoolsPoolIDMembersMemberID(params *GetPoolsPoolIDMembersMemberIDParams, opts ...ClientOption) (*GetPoolsPoolIDMembersMemberIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPoolsPoolIDMembersMemberIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPoolsPoolIDMembersMemberID",
		Method:             "GET",
		PathPattern:        "/pools/{pool_id}/members/{member_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPoolsPoolIDMembersMemberIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPoolsPoolIDMembersMemberIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPoolsPoolIDMembersMemberIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostPoolsPoolIDMembers creates new member
*/
func (a *Client) PostPoolsPoolIDMembers(params *PostPoolsPoolIDMembersParams, opts ...ClientOption) (*PostPoolsPoolIDMembersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPoolsPoolIDMembersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPoolsPoolIDMembers",
		Method:             "POST",
		PathPattern:        "/pools/{pool_id}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPoolsPoolIDMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPoolsPoolIDMembersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostPoolsPoolIDMembersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutPoolsPoolIDMembersMemberID updates a member
*/
func (a *Client) PutPoolsPoolIDMembersMemberID(params *PutPoolsPoolIDMembersMemberIDParams, opts ...ClientOption) (*PutPoolsPoolIDMembersMemberIDAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPoolsPoolIDMembersMemberIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutPoolsPoolIDMembersMemberID",
		Method:             "PUT",
		PathPattern:        "/pools/{pool_id}/members/{member_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPoolsPoolIDMembersMemberIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutPoolsPoolIDMembersMemberIDAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutPoolsPoolIDMembersMemberIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
