// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package members

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/andromeda/models"
)

// PutPoolsPoolIDMembersMemberIDReader is a Reader for the PutPoolsPoolIDMembersMemberID structure.
type PutPoolsPoolIDMembersMemberIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutPoolsPoolIDMembersMemberIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPutPoolsPoolIDMembersMemberIDAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPutPoolsPoolIDMembersMemberIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPutPoolsPoolIDMembersMemberIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutPoolsPoolIDMembersMemberIDAccepted creates a PutPoolsPoolIDMembersMemberIDAccepted with default headers values
func NewPutPoolsPoolIDMembersMemberIDAccepted() *PutPoolsPoolIDMembersMemberIDAccepted {
	return &PutPoolsPoolIDMembersMemberIDAccepted{}
}

/*
PutPoolsPoolIDMembersMemberIDAccepted describes a response with status code 202, with default header values.

Updated member.
*/
type PutPoolsPoolIDMembersMemberIDAccepted struct {
	Payload *PutPoolsPoolIDMembersMemberIDAcceptedBody
}

// IsSuccess returns true when this put pools pool Id members member Id accepted response has a 2xx status code
func (o *PutPoolsPoolIDMembersMemberIDAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put pools pool Id members member Id accepted response has a 3xx status code
func (o *PutPoolsPoolIDMembersMemberIDAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put pools pool Id members member Id accepted response has a 4xx status code
func (o *PutPoolsPoolIDMembersMemberIDAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this put pools pool Id members member Id accepted response has a 5xx status code
func (o *PutPoolsPoolIDMembersMemberIDAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this put pools pool Id members member Id accepted response a status code equal to that given
func (o *PutPoolsPoolIDMembersMemberIDAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PutPoolsPoolIDMembersMemberIDAccepted) Error() string {
	return fmt.Sprintf("[PUT /pools/{pool_id}/members/{member_id}][%d] putPoolsPoolIdMembersMemberIdAccepted  %+v", 202, o.Payload)
}

func (o *PutPoolsPoolIDMembersMemberIDAccepted) String() string {
	return fmt.Sprintf("[PUT /pools/{pool_id}/members/{member_id}][%d] putPoolsPoolIdMembersMemberIdAccepted  %+v", 202, o.Payload)
}

func (o *PutPoolsPoolIDMembersMemberIDAccepted) GetPayload() *PutPoolsPoolIDMembersMemberIDAcceptedBody {
	return o.Payload
}

func (o *PutPoolsPoolIDMembersMemberIDAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutPoolsPoolIDMembersMemberIDAcceptedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPoolsPoolIDMembersMemberIDNotFound creates a PutPoolsPoolIDMembersMemberIDNotFound with default headers values
func NewPutPoolsPoolIDMembersMemberIDNotFound() *PutPoolsPoolIDMembersMemberIDNotFound {
	return &PutPoolsPoolIDMembersMemberIDNotFound{}
}

/*
PutPoolsPoolIDMembersMemberIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutPoolsPoolIDMembersMemberIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this put pools pool Id members member Id not found response has a 2xx status code
func (o *PutPoolsPoolIDMembersMemberIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put pools pool Id members member Id not found response has a 3xx status code
func (o *PutPoolsPoolIDMembersMemberIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put pools pool Id members member Id not found response has a 4xx status code
func (o *PutPoolsPoolIDMembersMemberIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put pools pool Id members member Id not found response has a 5xx status code
func (o *PutPoolsPoolIDMembersMemberIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put pools pool Id members member Id not found response a status code equal to that given
func (o *PutPoolsPoolIDMembersMemberIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutPoolsPoolIDMembersMemberIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /pools/{pool_id}/members/{member_id}][%d] putPoolsPoolIdMembersMemberIdNotFound  %+v", 404, o.Payload)
}

func (o *PutPoolsPoolIDMembersMemberIDNotFound) String() string {
	return fmt.Sprintf("[PUT /pools/{pool_id}/members/{member_id}][%d] putPoolsPoolIdMembersMemberIdNotFound  %+v", 404, o.Payload)
}

func (o *PutPoolsPoolIDMembersMemberIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutPoolsPoolIDMembersMemberIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPoolsPoolIDMembersMemberIDDefault creates a PutPoolsPoolIDMembersMemberIDDefault with default headers values
func NewPutPoolsPoolIDMembersMemberIDDefault(code int) *PutPoolsPoolIDMembersMemberIDDefault {
	return &PutPoolsPoolIDMembersMemberIDDefault{
		_statusCode: code,
	}
}

/*
PutPoolsPoolIDMembersMemberIDDefault describes a response with status code -1, with default header values.

Unexpected Error
*/
type PutPoolsPoolIDMembersMemberIDDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the put pools pool ID members member ID default response
func (o *PutPoolsPoolIDMembersMemberIDDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this put pools pool ID members member ID default response has a 2xx status code
func (o *PutPoolsPoolIDMembersMemberIDDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this put pools pool ID members member ID default response has a 3xx status code
func (o *PutPoolsPoolIDMembersMemberIDDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this put pools pool ID members member ID default response has a 4xx status code
func (o *PutPoolsPoolIDMembersMemberIDDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this put pools pool ID members member ID default response has a 5xx status code
func (o *PutPoolsPoolIDMembersMemberIDDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this put pools pool ID members member ID default response a status code equal to that given
func (o *PutPoolsPoolIDMembersMemberIDDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *PutPoolsPoolIDMembersMemberIDDefault) Error() string {
	return fmt.Sprintf("[PUT /pools/{pool_id}/members/{member_id}][%d] PutPoolsPoolIDMembersMemberID default  %+v", o._statusCode, o.Payload)
}

func (o *PutPoolsPoolIDMembersMemberIDDefault) String() string {
	return fmt.Sprintf("[PUT /pools/{pool_id}/members/{member_id}][%d] PutPoolsPoolIDMembersMemberID default  %+v", o._statusCode, o.Payload)
}

func (o *PutPoolsPoolIDMembersMemberIDDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutPoolsPoolIDMembersMemberIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PutPoolsPoolIDMembersMemberIDAcceptedBody put pools pool ID members member ID accepted body
swagger:model PutPoolsPoolIDMembersMemberIDAcceptedBody
*/
type PutPoolsPoolIDMembersMemberIDAcceptedBody struct {

	// member
	Member *models.Member `json:"member,omitempty"`
}

// Validate validates this put pools pool ID members member ID accepted body
func (o *PutPoolsPoolIDMembersMemberIDAcceptedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMember(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutPoolsPoolIDMembersMemberIDAcceptedBody) validateMember(formats strfmt.Registry) error {
	if swag.IsZero(o.Member) { // not required
		return nil
	}

	if o.Member != nil {
		if err := o.Member.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putPoolsPoolIdMembersMemberIdAccepted" + "." + "member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putPoolsPoolIdMembersMemberIdAccepted" + "." + "member")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put pools pool ID members member ID accepted body based on the context it is used
func (o *PutPoolsPoolIDMembersMemberIDAcceptedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMember(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutPoolsPoolIDMembersMemberIDAcceptedBody) contextValidateMember(ctx context.Context, formats strfmt.Registry) error {

	if o.Member != nil {
		if err := o.Member.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putPoolsPoolIdMembersMemberIdAccepted" + "." + "member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putPoolsPoolIdMembersMemberIdAccepted" + "." + "member")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutPoolsPoolIDMembersMemberIDAcceptedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutPoolsPoolIDMembersMemberIDAcceptedBody) UnmarshalBinary(b []byte) error {
	var res PutPoolsPoolIDMembersMemberIDAcceptedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PutPoolsPoolIDMembersMemberIDBody put pools pool ID members member ID body
swagger:model PutPoolsPoolIDMembersMemberIDBody
*/
type PutPoolsPoolIDMembersMemberIDBody struct {

	// member
	// Required: true
	Member *models.Member `json:"member"`
}

// Validate validates this put pools pool ID members member ID body
func (o *PutPoolsPoolIDMembersMemberIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMember(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutPoolsPoolIDMembersMemberIDBody) validateMember(formats strfmt.Registry) error {

	if err := validate.Required("member"+"."+"member", "body", o.Member); err != nil {
		return err
	}

	if o.Member != nil {
		if err := o.Member.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("member" + "." + "member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("member" + "." + "member")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put pools pool ID members member ID body based on the context it is used
func (o *PutPoolsPoolIDMembersMemberIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMember(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutPoolsPoolIDMembersMemberIDBody) contextValidateMember(ctx context.Context, formats strfmt.Registry) error {

	if o.Member != nil {
		if err := o.Member.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("member" + "." + "member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("member" + "." + "member")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutPoolsPoolIDMembersMemberIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutPoolsPoolIDMembersMemberIDBody) UnmarshalBinary(b []byte) error {
	var res PutPoolsPoolIDMembersMemberIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
