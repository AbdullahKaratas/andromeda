// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package members

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetPoolsPoolIDMembersMemberIDParams creates a new GetPoolsPoolIDMembersMemberIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetPoolsPoolIDMembersMemberIDParams() *GetPoolsPoolIDMembersMemberIDParams {
	return &GetPoolsPoolIDMembersMemberIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetPoolsPoolIDMembersMemberIDParamsWithTimeout creates a new GetPoolsPoolIDMembersMemberIDParams object
// with the ability to set a timeout on a request.
func NewGetPoolsPoolIDMembersMemberIDParamsWithTimeout(timeout time.Duration) *GetPoolsPoolIDMembersMemberIDParams {
	return &GetPoolsPoolIDMembersMemberIDParams{
		timeout: timeout,
	}
}

// NewGetPoolsPoolIDMembersMemberIDParamsWithContext creates a new GetPoolsPoolIDMembersMemberIDParams object
// with the ability to set a context for a request.
func NewGetPoolsPoolIDMembersMemberIDParamsWithContext(ctx context.Context) *GetPoolsPoolIDMembersMemberIDParams {
	return &GetPoolsPoolIDMembersMemberIDParams{
		Context: ctx,
	}
}

// NewGetPoolsPoolIDMembersMemberIDParamsWithHTTPClient creates a new GetPoolsPoolIDMembersMemberIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetPoolsPoolIDMembersMemberIDParamsWithHTTPClient(client *http.Client) *GetPoolsPoolIDMembersMemberIDParams {
	return &GetPoolsPoolIDMembersMemberIDParams{
		HTTPClient: client,
	}
}

/*
GetPoolsPoolIDMembersMemberIDParams contains all the parameters to send to the API endpoint

	for the get pools pool ID members member ID operation.

	Typically these are written to a http.Request.
*/
type GetPoolsPoolIDMembersMemberIDParams struct {

	/* MemberID.

	   The UUID of the member

	   Format: uuid
	*/
	MemberID strfmt.UUID

	/* PoolID.

	   The UUID of the pool

	   Format: uuid
	*/
	PoolID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get pools pool ID members member ID params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPoolsPoolIDMembersMemberIDParams) WithDefaults() *GetPoolsPoolIDMembersMemberIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get pools pool ID members member ID params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPoolsPoolIDMembersMemberIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get pools pool ID members member ID params
func (o *GetPoolsPoolIDMembersMemberIDParams) WithTimeout(timeout time.Duration) *GetPoolsPoolIDMembersMemberIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get pools pool ID members member ID params
func (o *GetPoolsPoolIDMembersMemberIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get pools pool ID members member ID params
func (o *GetPoolsPoolIDMembersMemberIDParams) WithContext(ctx context.Context) *GetPoolsPoolIDMembersMemberIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get pools pool ID members member ID params
func (o *GetPoolsPoolIDMembersMemberIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get pools pool ID members member ID params
func (o *GetPoolsPoolIDMembersMemberIDParams) WithHTTPClient(client *http.Client) *GetPoolsPoolIDMembersMemberIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get pools pool ID members member ID params
func (o *GetPoolsPoolIDMembersMemberIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMemberID adds the memberID to the get pools pool ID members member ID params
func (o *GetPoolsPoolIDMembersMemberIDParams) WithMemberID(memberID strfmt.UUID) *GetPoolsPoolIDMembersMemberIDParams {
	o.SetMemberID(memberID)
	return o
}

// SetMemberID adds the memberId to the get pools pool ID members member ID params
func (o *GetPoolsPoolIDMembersMemberIDParams) SetMemberID(memberID strfmt.UUID) {
	o.MemberID = memberID
}

// WithPoolID adds the poolID to the get pools pool ID members member ID params
func (o *GetPoolsPoolIDMembersMemberIDParams) WithPoolID(poolID strfmt.UUID) *GetPoolsPoolIDMembersMemberIDParams {
	o.SetPoolID(poolID)
	return o
}

// SetPoolID adds the poolId to the get pools pool ID members member ID params
func (o *GetPoolsPoolIDMembersMemberIDParams) SetPoolID(poolID strfmt.UUID) {
	o.PoolID = poolID
}

// WriteToRequest writes these params to a swagger request
func (o *GetPoolsPoolIDMembersMemberIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param member_id
	if err := r.SetPathParam("member_id", o.MemberID.String()); err != nil {
		return err
	}

	// path param pool_id
	if err := r.SetPathParam("pool_id", o.PoolID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
