// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package administrative

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/andromeda/models"
)

// PutQuotasProjectIDReader is a Reader for the PutQuotasProjectID structure.
type PutQuotasProjectIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutQuotasProjectIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPutQuotasProjectIDAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPutQuotasProjectIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutQuotasProjectIDAccepted creates a PutQuotasProjectIDAccepted with default headers values
func NewPutQuotasProjectIDAccepted() *PutQuotasProjectIDAccepted {
	return &PutQuotasProjectIDAccepted{}
}

/* PutQuotasProjectIDAccepted describes a response with status code 202, with default header values.

Updated quota for a project.
*/
type PutQuotasProjectIDAccepted struct {
	Payload *PutQuotasProjectIDAcceptedBody
}

func (o *PutQuotasProjectIDAccepted) Error() string {
	return fmt.Sprintf("[PUT /quotas/{project_id}][%d] putQuotasProjectIdAccepted  %+v", 202, o.Payload)
}
func (o *PutQuotasProjectIDAccepted) GetPayload() *PutQuotasProjectIDAcceptedBody {
	return o.Payload
}

func (o *PutQuotasProjectIDAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutQuotasProjectIDAcceptedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutQuotasProjectIDDefault creates a PutQuotasProjectIDDefault with default headers values
func NewPutQuotasProjectIDDefault(code int) *PutQuotasProjectIDDefault {
	return &PutQuotasProjectIDDefault{
		_statusCode: code,
	}
}

/* PutQuotasProjectIDDefault describes a response with status code -1, with default header values.

Unexpected Error
*/
type PutQuotasProjectIDDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the put quotas project ID default response
func (o *PutQuotasProjectIDDefault) Code() int {
	return o._statusCode
}

func (o *PutQuotasProjectIDDefault) Error() string {
	return fmt.Sprintf("[PUT /quotas/{project_id}][%d] PutQuotasProjectID default  %+v", o._statusCode, o.Payload)
}
func (o *PutQuotasProjectIDDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutQuotasProjectIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PutQuotasProjectIDAcceptedBody put quotas project ID accepted body
swagger:model PutQuotasProjectIDAcceptedBody
*/
type PutQuotasProjectIDAcceptedBody struct {

	// quota
	Quota *models.Quota `json:"quota,omitempty"`
}

// Validate validates this put quotas project ID accepted body
func (o *PutQuotasProjectIDAcceptedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuota(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutQuotasProjectIDAcceptedBody) validateQuota(formats strfmt.Registry) error {
	if swag.IsZero(o.Quota) { // not required
		return nil
	}

	if o.Quota != nil {
		if err := o.Quota.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putQuotasProjectIdAccepted" + "." + "quota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putQuotasProjectIdAccepted" + "." + "quota")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put quotas project ID accepted body based on the context it is used
func (o *PutQuotasProjectIDAcceptedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateQuota(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutQuotasProjectIDAcceptedBody) contextValidateQuota(ctx context.Context, formats strfmt.Registry) error {

	if o.Quota != nil {
		if err := o.Quota.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putQuotasProjectIdAccepted" + "." + "quota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putQuotasProjectIdAccepted" + "." + "quota")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutQuotasProjectIDAcceptedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutQuotasProjectIDAcceptedBody) UnmarshalBinary(b []byte) error {
	var res PutQuotasProjectIDAcceptedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutQuotasProjectIDBody put quotas project ID body
swagger:model PutQuotasProjectIDBody
*/
type PutQuotasProjectIDBody struct {

	// quota
	// Required: true
	Quota *models.Quota `json:"quota"`
}

// Validate validates this put quotas project ID body
func (o *PutQuotasProjectIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuota(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutQuotasProjectIDBody) validateQuota(formats strfmt.Registry) error {

	if err := validate.Required("quota"+"."+"quota", "body", o.Quota); err != nil {
		return err
	}

	if o.Quota != nil {
		if err := o.Quota.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quota" + "." + "quota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quota" + "." + "quota")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put quotas project ID body based on the context it is used
func (o *PutQuotasProjectIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateQuota(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutQuotasProjectIDBody) contextValidateQuota(ctx context.Context, formats strfmt.Registry) error {

	if o.Quota != nil {
		if err := o.Quota.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quota" + "." + "quota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quota" + "." + "quota")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutQuotasProjectIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutQuotasProjectIDBody) UnmarshalBinary(b []byte) error {
	var res PutQuotasProjectIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
