// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package administrative

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/andromeda/models"
)

// GetQuotasReader is a Reader for the GetQuotas structure.
type GetQuotasReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetQuotasReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetQuotasOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetQuotasDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetQuotasOK creates a GetQuotasOK with default headers values
func NewGetQuotasOK() *GetQuotasOK {
	return &GetQuotasOK{}
}

/* GetQuotasOK describes a response with status code 200, with default header values.

A JSON array of quotas
*/
type GetQuotasOK struct {
	Payload *GetQuotasOKBody
}

func (o *GetQuotasOK) Error() string {
	return fmt.Sprintf("[GET /quotas][%d] getQuotasOK  %+v", 200, o.Payload)
}
func (o *GetQuotasOK) GetPayload() *GetQuotasOKBody {
	return o.Payload
}

func (o *GetQuotasOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetQuotasOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQuotasDefault creates a GetQuotasDefault with default headers values
func NewGetQuotasDefault(code int) *GetQuotasDefault {
	return &GetQuotasDefault{
		_statusCode: code,
	}
}

/* GetQuotasDefault describes a response with status code -1, with default header values.

Unexpected Error
*/
type GetQuotasDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get quotas default response
func (o *GetQuotasDefault) Code() int {
	return o._statusCode
}

func (o *GetQuotasDefault) Error() string {
	return fmt.Sprintf("[GET /quotas][%d] GetQuotas default  %+v", o._statusCode, o.Payload)
}
func (o *GetQuotasDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetQuotasDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetQuotasOKBody get quotas o k body
swagger:model GetQuotasOKBody
*/
type GetQuotasOKBody struct {

	// quotas
	Quotas []*GetQuotasOKBodyQuotasItems0 `json:"quotas"`
}

// Validate validates this get quotas o k body
func (o *GetQuotasOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuotas(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetQuotasOKBody) validateQuotas(formats strfmt.Registry) error {
	if swag.IsZero(o.Quotas) { // not required
		return nil
	}

	for i := 0; i < len(o.Quotas); i++ {
		if swag.IsZero(o.Quotas[i]) { // not required
			continue
		}

		if o.Quotas[i] != nil {
			if err := o.Quotas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getQuotasOK" + "." + "quotas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getQuotasOK" + "." + "quotas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get quotas o k body based on the context it is used
func (o *GetQuotasOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateQuotas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetQuotasOKBody) contextValidateQuotas(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Quotas); i++ {

		if o.Quotas[i] != nil {
			if err := o.Quotas[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getQuotasOK" + "." + "quotas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getQuotasOK" + "." + "quotas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetQuotasOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetQuotasOKBody) UnmarshalBinary(b []byte) error {
	var res GetQuotasOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetQuotasOKBodyQuotasItems0 get quotas o k body quotas items0
swagger:model GetQuotasOKBodyQuotasItems0
*/
type GetQuotasOKBodyQuotasItems0 struct {
	models.Quota

	models.QuotaUsage

	// The ID of the project owning this resource.
	// Example: fa84c217f361441986a220edf9b1e337
	// Max Length: 32
	// Min Length: 32
	ProjectID *string `json:"project_id,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetQuotasOKBodyQuotasItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.Quota
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.Quota = aO0

	// AO1
	var aO1 models.QuotaUsage
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.QuotaUsage = aO1

	// AO2
	var dataAO2 struct {
		ProjectID *string `json:"project_id,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	o.ProjectID = dataAO2.ProjectID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetQuotasOKBodyQuotasItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(o.Quota)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(o.QuotaUsage)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	var dataAO2 struct {
		ProjectID *string `json:"project_id,omitempty"`
	}

	dataAO2.ProjectID = o.ProjectID

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get quotas o k body quotas items0
func (o *GetQuotasOKBodyQuotasItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Quota
	if err := o.Quota.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.QuotaUsage
	if err := o.QuotaUsage.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetQuotasOKBodyQuotasItems0) validateProjectID(formats strfmt.Registry) error {

	if swag.IsZero(o.ProjectID) { // not required
		return nil
	}

	if err := validate.MinLength("project_id", "body", *o.ProjectID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("project_id", "body", *o.ProjectID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get quotas o k body quotas items0 based on the context it is used
func (o *GetQuotasOKBodyQuotasItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Quota
	if err := o.Quota.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.QuotaUsage
	if err := o.QuotaUsage.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetQuotasOKBodyQuotasItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetQuotasOKBodyQuotasItems0) UnmarshalBinary(b []byte) error {
	var res GetQuotasOKBodyQuotasItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
