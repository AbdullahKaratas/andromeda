// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package administrative

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sapcc/andromeda/models"
)

// GetQuotasDefaultsReader is a Reader for the GetQuotasDefaults structure.
type GetQuotasDefaultsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetQuotasDefaultsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetQuotasDefaultsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetQuotasDefaultsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetQuotasDefaultsOK creates a GetQuotasDefaultsOK with default headers values
func NewGetQuotasDefaultsOK() *GetQuotasDefaultsOK {
	return &GetQuotasDefaultsOK{}
}

/* GetQuotasDefaultsOK describes a response with status code 200, with default header values.

Show the quota defaults configured for new projects.
*/
type GetQuotasDefaultsOK struct {
	Payload *GetQuotasDefaultsOKBody
}

func (o *GetQuotasDefaultsOK) Error() string {
	return fmt.Sprintf("[GET /quotas/defaults][%d] getQuotasDefaultsOK  %+v", 200, o.Payload)
}
func (o *GetQuotasDefaultsOK) GetPayload() *GetQuotasDefaultsOKBody {
	return o.Payload
}

func (o *GetQuotasDefaultsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetQuotasDefaultsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQuotasDefaultsDefault creates a GetQuotasDefaultsDefault with default headers values
func NewGetQuotasDefaultsDefault(code int) *GetQuotasDefaultsDefault {
	return &GetQuotasDefaultsDefault{
		_statusCode: code,
	}
}

/* GetQuotasDefaultsDefault describes a response with status code -1, with default header values.

Unexpected Error
*/
type GetQuotasDefaultsDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get quotas defaults default response
func (o *GetQuotasDefaultsDefault) Code() int {
	return o._statusCode
}

func (o *GetQuotasDefaultsDefault) Error() string {
	return fmt.Sprintf("[GET /quotas/defaults][%d] GetQuotasDefaults default  %+v", o._statusCode, o.Payload)
}
func (o *GetQuotasDefaultsDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetQuotasDefaultsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetQuotasDefaultsOKBody get quotas defaults o k body
swagger:model GetQuotasDefaultsOKBody
*/
type GetQuotasDefaultsOKBody struct {

	// quota
	Quota *models.Quota `json:"quota,omitempty"`
}

// Validate validates this get quotas defaults o k body
func (o *GetQuotasDefaultsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuota(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetQuotasDefaultsOKBody) validateQuota(formats strfmt.Registry) error {
	if swag.IsZero(o.Quota) { // not required
		return nil
	}

	if o.Quota != nil {
		if err := o.Quota.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getQuotasDefaultsOK" + "." + "quota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getQuotasDefaultsOK" + "." + "quota")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get quotas defaults o k body based on the context it is used
func (o *GetQuotasDefaultsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateQuota(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetQuotasDefaultsOKBody) contextValidateQuota(ctx context.Context, formats strfmt.Registry) error {

	if o.Quota != nil {
		if err := o.Quota.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getQuotasDefaultsOK" + "." + "quota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getQuotasDefaultsOK" + "." + "quota")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetQuotasDefaultsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetQuotasDefaultsOKBody) UnmarshalBinary(b []byte) error {
	var res GetQuotasDefaultsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
