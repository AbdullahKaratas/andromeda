// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/andromeda/models"
)

// PostMonitorsReader is a Reader for the PostMonitors structure.
type PostMonitorsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostMonitorsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostMonitorsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostMonitorsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostMonitorsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPostMonitorsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostMonitorsCreated creates a PostMonitorsCreated with default headers values
func NewPostMonitorsCreated() *PostMonitorsCreated {
	return &PostMonitorsCreated{}
}

/* PostMonitorsCreated describes a response with status code 201, with default header values.

Created monitor.
*/
type PostMonitorsCreated struct {
	Payload *PostMonitorsCreatedBody
}

func (o *PostMonitorsCreated) Error() string {
	return fmt.Sprintf("[POST /monitors][%d] postMonitorsCreated  %+v", 201, o.Payload)
}
func (o *PostMonitorsCreated) GetPayload() *PostMonitorsCreatedBody {
	return o.Payload
}

func (o *PostMonitorsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostMonitorsCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostMonitorsBadRequest creates a PostMonitorsBadRequest with default headers values
func NewPostMonitorsBadRequest() *PostMonitorsBadRequest {
	return &PostMonitorsBadRequest{}
}

/* PostMonitorsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PostMonitorsBadRequest struct {
	Payload *models.Error
}

func (o *PostMonitorsBadRequest) Error() string {
	return fmt.Sprintf("[POST /monitors][%d] postMonitorsBadRequest  %+v", 400, o.Payload)
}
func (o *PostMonitorsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostMonitorsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostMonitorsNotFound creates a PostMonitorsNotFound with default headers values
func NewPostMonitorsNotFound() *PostMonitorsNotFound {
	return &PostMonitorsNotFound{}
}

/* PostMonitorsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostMonitorsNotFound struct {
	Payload *models.Error
}

func (o *PostMonitorsNotFound) Error() string {
	return fmt.Sprintf("[POST /monitors][%d] postMonitorsNotFound  %+v", 404, o.Payload)
}
func (o *PostMonitorsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostMonitorsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostMonitorsDefault creates a PostMonitorsDefault with default headers values
func NewPostMonitorsDefault(code int) *PostMonitorsDefault {
	return &PostMonitorsDefault{
		_statusCode: code,
	}
}

/* PostMonitorsDefault describes a response with status code -1, with default header values.

Unexpected Error
*/
type PostMonitorsDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the post monitors default response
func (o *PostMonitorsDefault) Code() int {
	return o._statusCode
}

func (o *PostMonitorsDefault) Error() string {
	return fmt.Sprintf("[POST /monitors][%d] PostMonitors default  %+v", o._statusCode, o.Payload)
}
func (o *PostMonitorsDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostMonitorsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostMonitorsBody post monitors body
swagger:model PostMonitorsBody
*/
type PostMonitorsBody struct {

	// monitor
	// Required: true
	Monitor *models.Monitor `json:"monitor"`
}

// Validate validates this post monitors body
func (o *PostMonitorsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMonitor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostMonitorsBody) validateMonitor(formats strfmt.Registry) error {

	if err := validate.Required("monitor"+"."+"monitor", "body", o.Monitor); err != nil {
		return err
	}

	if o.Monitor != nil {
		if err := o.Monitor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitor" + "." + "monitor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitor" + "." + "monitor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post monitors body based on the context it is used
func (o *PostMonitorsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMonitor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostMonitorsBody) contextValidateMonitor(ctx context.Context, formats strfmt.Registry) error {

	if o.Monitor != nil {
		if err := o.Monitor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitor" + "." + "monitor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitor" + "." + "monitor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostMonitorsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostMonitorsBody) UnmarshalBinary(b []byte) error {
	var res PostMonitorsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostMonitorsCreatedBody post monitors created body
swagger:model PostMonitorsCreatedBody
*/
type PostMonitorsCreatedBody struct {

	// monitor
	Monitor *models.Monitor `json:"monitor,omitempty"`
}

// Validate validates this post monitors created body
func (o *PostMonitorsCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMonitor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostMonitorsCreatedBody) validateMonitor(formats strfmt.Registry) error {
	if swag.IsZero(o.Monitor) { // not required
		return nil
	}

	if o.Monitor != nil {
		if err := o.Monitor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postMonitorsCreated" + "." + "monitor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postMonitorsCreated" + "." + "monitor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post monitors created body based on the context it is used
func (o *PostMonitorsCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMonitor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostMonitorsCreatedBody) contextValidateMonitor(ctx context.Context, formats strfmt.Registry) error {

	if o.Monitor != nil {
		if err := o.Monitor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postMonitorsCreated" + "." + "monitor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postMonitorsCreated" + "." + "monitor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostMonitorsCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostMonitorsCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostMonitorsCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
